
ORG 0000H
OUTBIG EQU 8002H   ;位选信号控制地址,分时复用为键盘列扫描信号地址
OUTSEG EQU 8004H   ;段选信号控制地址
KEYIN  EQU 8001H    ;键盘行选信号控制地址
DAC EQU 9000H ;D/A转换器数字量放置位置,D/A选通信号为CS1
AJMP READY
ORG 000BH          ;T0的中断服务程序地址TIME
AJMP TIME

;T1计数,T0定时,晶振认为是12MHz,实际是11.0592MHz
READY:
	MOV SP,#60H    	;设置堆栈指针
	MOV 20H,#3fH   	;0
	MOV 21H,#3fH
	MOV 22H,#3fH
	MOV 23H,#3fH
	MOV 24H,#3fH
	MOV 25H,#3fH   	;设置LED显示初值

	MOV 26H,#00H   	;用来存期望值
	MOV 27H,#00H   	;27H用于记录中断次数
	MOV 28H,#01H   	;记录期望值低位
	MOV 29H,#20
					;29H存放的是数字量，用于控制D/A转换器。
					;这个数值决定了D/A转换器的输出，从而控制连接到D/A转换器的外部设备（如电机）的行为。
					;在程序中，29H的值【越大转速越慢，越小转速越快】。

	MOV TMOD,#51H  	;01010001B
					;对于 TMOD 寄存器，低四位（0-3位）用于设置定时器0（T0），高四位（4-7位）用于设置定时器1（T1）。
					;0101对应于高四位，设置了定时器1（T1）的模式。其中，最低两位（01）表示定时器1在模式1下工作。
					;模式1是一个16位定时器/计数器。
					;低四位 0001 设置了定时器0（T0）。这里，最低两位 01 表示定时器0也在模式1下工作。
					;所以，MOV TMOD,#51H 的作用是将定时器0和定时器1都设置为16位模式1操作。
	MOV TL0,#0B0H
	MOV TH0,#3CH   	;设置T0定时常数为15536,若晶振为12MHz,则每20次中断为1秒
	MOV TL1,#00H
	MOV TH1,#00H   	;设置T1计数器计数初值为0
	SETB EA         ;允许总中断（中断模式的总开关）
	SETB ET0        ;允许T0中断
	SETB TR0       	;启动计时
	SETB TR1       	;启动计数。T1定时器在外部引脚的跳变（通常是从高电平到低电平的跳变）下计数
MAIN:
	LCALL DACHANGE
	LCALL DISPLAY   ;无键码输入,继续显示当前的数字(十六进制)
	LCALL TEST      ;测试是否有键盘输入
	JZ MAIN         ;累加器为0,无按键,继续显示
	LCALL SEARCH    ;有键值输入,则获取键值,存在A中

	MOV 20H,21H     ;左侧2位的数码管显示数（期望值）左移

	MOV B,28H        ;期望值高位放在B
	MOV 28H,A        ;期望值低位放在A

	MOV DPTR,#LEDTAB
	MOVC A,@A+DPTR  ;将键值转换为段码
	MOV 21H,A       ;将新键值的段码放入第二位LED显示

	MOV A,#0aH      ;将乘数16放入A
	MUL AB          ;高位在B,低位在A
	ADD A,28H       ;期望值结果放A
	MOV 26H,A       ;期望值放26H

    LCALL DACHANGE
SJMP MAIN

DACHANGE:
	MOV DPTR,#DAC
	MOV A,29H
	MOVX @DPTR,A
RET
;-----显示模块-----------------------------------------------------------
DISPLAY:
	MOV R0,#20H    ;缓冲区从20H处开始
	MOV R1,#6    ;共6个八段管
	MOV R2,#00100000B    ;从左边开始显示灯亮为1，灭为0

	LOOP:
		MOV DPTR,#OUTSEG
		MOV A,#0
		MOVX @DPTR,A    ;段码设定为0
		MOV A,@R0       ;将以20H为首地址的内存值发送到段码输出口8004H
		MOVX @DPTR,A

		MOV DPTR,#OUTBIG
		MOV A,R2
		MOVX @DPTR,A     ;输出位选通信号， 使每次只显示一位八段管
		RR A
		MOV R2,A
		LCALL DELAY         ;延时
		INC R0
	DJNZ R1,LOOP        ;显示6次





	RET
;---延时子程序--------------------------------------------------------------
	DELAY:
		MOV R7,#02H
		DEL1:
		MOV R6,#0ffH
		DEL2:
		DJNZ R6,DEL2
		DJNZ R7,DEL1
	RET
;---------检测有无键盘输入-------------------------------------------------
TEST:
	MOV DPTR,#OUTBIG
		MOV A,#00H
		MOVX @DPTR,A
		MOV DPTR,#KEYIN
		MOVX A,@DPTR    ;回读行状态
		CPL  A        ;累加器A各位求反
		ANL A,#0FH    ;取A低4位

	RET
;-------获取按下的键信息--------------------------------------------------
SEARCH:
	MOV R1,#00100000B  ;初始列，从左边开始
	MOV R2,#06H ;找6列
	MOV R5,#00H ;记录当前所在列
	MOV R4,#03H ;已经跳过了多少列
	;----找出有效列和行----------
	LSEARCH:
		MOV A,R1
		CPL A           ;键盘列扫描低有效，LED位选高有效
		MOV DPTR,#OUTBIG
		MOVX @DPTR,A
		CPL A
		RR A            ;始终将LED位选通信号右移，存入R1
		MOV R1,A
		MOV DPTR,#KEYIN
		MOVX A,@DPTR     ;读出键盘行扫描信号(低有效)
		CPL A
		ANL A,#0FH     ;取低4位
		JNZ HSEARCH    ;A不为零就找到所在列和行（列存在R1中，行存在A中）
		INC R5     	 ;A为全零，则列数加一继续查找
	DJNZ R2,LSEARCH  ;至多6次可以找到

	;--------将行从二进制位表示转化为标号的形式------
	HSEARCH:
			MOV R7,#04H	;一共有四行
		LOOP2:
			RRC A
			JC GET
			DEC R4
		DJNZ R7,LOOP2
	;-------;确定输入的键码值---------------------
	GET:
        MOV A,R4    ;键值在键盘上的偏移量=行号*6+列号,R4*6+R5->A
        MOV B,#6H
        MUL AB
        ADD A,R5
        MOV DPTR,#KEYTAB
        MOVC A,@A+DPTR
        MOV 26H,A    ;将取出键值暂时保存在内存中,防止数据丢失

	WAIT:
		MOV DPTR,#OUTBIG    ;等键释放
		CLR A
		MOVX @DPTR,A
		LCALL DELAY
		LCALL TEST
		JNZ WAIT
		MOV A,26H    ;将键值存入A
RET
;-----T0的中断处理程序TIME----------------
TIME:
	;PUSH
		PUSH PSW
		PUSH ACC
		PUSH B
		PUSH DPL
		PUSH DPH
	;选择寄存器组1
		SETB RS0
		CLR  RS1
	;中断次数+1
		MOV R0,27H   ;取出中断次数
		INC R0  ;中断次数加一
		MOV 27H,R0   ;存回中断次数
	CJNE R0,#14H,END1  ;不是20（1s）继续中断计数
	;如果1s了,清空中断计数
		MOV R0,#00H
		MOV 27H,R0  ;存回中断次数
	;暂停计时计数
		CLR  TR0  ;停止计时
		CLR  TR1  ;停止计数
	;实际转速转换为16进制
		MOV  30H,TL1  ;计数低8位送入30H
		MOV  31H,TH1  ;计数高8位送入31H
		;先处理低8位
			MOV  A,30H    ;被除数存A
			MOV  B,#0aH   ;除数存B
			DIV AB        ;结果的商存A,余数存B
			;存入显示缓冲区
				MOV DPTR,#LEDTAB
				MOVC A,@A+DPTR  ;将键值转换为段码
				MOV  24H,A
				MOV A,B
				MOVC A,@A+DPTR  ;将键值转换为段码
				MOV 25H,A
		;再处理高8位（然而并没有什么用，根本转不到那么快）
			MOV A,31H    ;被除数存A
			MOV  B,#0aH    ;除数存B
			DIV AB       ;结果的商存A,余数存B
			;存入显示缓冲区
				MOV DPTR,#LEDTAB
				MOVC A,@A+DPTR  ;将键值转换为段码
				MOV  22H,A
				MOV A,B
				MOVC A,@A+DPTR  ;将键值转换为段码
				MOV 23H,A

	;转速控制
		MOV A,31H     ;取转速高位
		JNZ SPEEDDOWN ;高位不是0，则转速太快，减速
		MOV A,30H     ;取转速低位
		CLR C         ;清除CY位
		SUBB A,26H    ;转速-期望值，结果存在A
		JB CY,SPEEDUP ;出现借位，转速偏低，加速
		JZ SUBEND     ;若A全零，转速和期望值相同则跳转
		SJMP SPEEDDOWN ;否则，转速太快，减速

		SPEEDDOWN:
			MOV A,29H     ;数字量放入A
			ADDC A,#5
			MOV 29H,A      ;转速-5（初始32）
			SJMP SUBEND

		SPEEDUP:
			MOV A,29H     ;数字量放入A
			SUBB A,#5
			MOV 29H,A      ;转速+5（初始32）
			SJMP SUBEND

	;恢复中断设置
		SUBEND:	;重新赋初值然后启动计时计数
			MOV TL0,#0B0H
			MOV TH0,#3CH   ;设置T0定时常数为15536,若晶振为12MHz,则每20次中断为1秒
			MOV TL1,#00H
			MOV TH1,#00H   ;设置T1计数器计数初值为0
			SETB ET0        ;允许T0中断
			SETB EA         ;允许总中断
			SETB TR0       ;启动计时
			SETB TR1       ;启动计数
	;POP
		END1:
			POP DPH
			POP DPL
			POP B
			POP ACC
			POP PSW
RETI     ;中断返回只能用RETI

;--段码与数值---按键与键值----查表----------------------------------------

LEDTAB:     ;八段管显示码
        DB 3fh, 06h, 5bh, 4fh, 66h, 6dh, 7dh, 07h
        DB 7fh, 6fh, 77h, 7ch, 39h, 5eh, 79h, 71h
KEYTAB:    ;键盘码
        DB 07h, 08h, 09h, 0ah, 10h, 0ffh,
        DB 04h, 05h, 06h, 0bh, 11h, 14h,
        DB 01h, 02h, 03h, 0ch, 12h, 15h,
        DB 00h, 0fh,0eh, 0dh, 13h, 16h,
NUMBERTAB:
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,01H,07H,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,00H,
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,03H,
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,02H,0FFH,0FFH,0FFH,0FFH,
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,04H,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,05H,0FFH,09H,
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,06H,0FFH,08H,
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,
DB 0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,
