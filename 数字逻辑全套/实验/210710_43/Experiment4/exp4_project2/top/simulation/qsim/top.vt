// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/10/2022 22:29:40"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    top
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module top_vlg_sample_tst(
	clk,
	clr,
	reset,
	rst,
	sampler_tx
);
input  clk;
input  clr;
input  reset;
input  rst;
output sampler_tx;

reg sample;
time current_time;
always @(clk or clr or reset or rst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module top_vlg_check_tst (
	c_state,
	n_state,
	z,
	sampler_rx
);
input [3:0] c_state;
input [3:0] n_state;
input  z;
input sampler_rx;

reg [3:0] c_state_expected;
reg [3:0] n_state_expected;
reg  z_expected;

reg [3:0] c_state_prev;
reg [3:0] n_state_prev;
reg  z_prev;

reg [3:0] c_state_expected_prev;
reg [3:0] n_state_expected_prev;
reg  z_expected_prev;

reg [3:0] last_c_state_exp;
reg [3:0] last_n_state_exp;
reg  last_z_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	c_state_prev = c_state;
	n_state_prev = n_state;
	z_prev = z;
end

// update expected /o prevs

always @(trigger)
begin
	c_state_expected_prev = c_state_expected;
	n_state_expected_prev = n_state_expected;
	z_expected_prev = z_expected;
end



// expected z
initial
begin
	z_expected = 1'bX;
end 
// expected c_state[ 3 ]
initial
begin
	c_state_expected[3] = 1'bX;
end 
// expected c_state[ 2 ]
initial
begin
	c_state_expected[2] = 1'bX;
end 
// expected c_state[ 1 ]
initial
begin
	c_state_expected[1] = 1'bX;
end 
// expected c_state[ 0 ]
initial
begin
	c_state_expected[0] = 1'bX;
end 
// expected n_state[ 3 ]
initial
begin
	n_state_expected[3] = 1'bX;
end 
// expected n_state[ 2 ]
initial
begin
	n_state_expected[2] = 1'bX;
end 
// expected n_state[ 1 ]
initial
begin
	n_state_expected[1] = 1'bX;
end 
// expected n_state[ 0 ]
initial
begin
	n_state_expected[0] = 1'bX;
end 
// generate trigger
always @(c_state_expected or c_state or n_state_expected or n_state or z_expected or z)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected c_state = %b | expected n_state = %b | expected z = %b | ",c_state_expected_prev,n_state_expected_prev,z_expected_prev);
	$display("| real c_state = %b | real n_state = %b | real z = %b | ",c_state_prev,n_state_prev,z_prev);
`endif
	if (
		( c_state_expected_prev[0] !== 1'bx ) && ( c_state_prev[0] !== c_state_expected_prev[0] )
		&& ((c_state_expected_prev[0] !== last_c_state_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_state[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_state_expected_prev);
		$display ("     Real value = %b", c_state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_state_exp[0] = c_state_expected_prev[0];
	end
	if (
		( c_state_expected_prev[1] !== 1'bx ) && ( c_state_prev[1] !== c_state_expected_prev[1] )
		&& ((c_state_expected_prev[1] !== last_c_state_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_state[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_state_expected_prev);
		$display ("     Real value = %b", c_state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_state_exp[1] = c_state_expected_prev[1];
	end
	if (
		( c_state_expected_prev[2] !== 1'bx ) && ( c_state_prev[2] !== c_state_expected_prev[2] )
		&& ((c_state_expected_prev[2] !== last_c_state_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_state[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_state_expected_prev);
		$display ("     Real value = %b", c_state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_state_exp[2] = c_state_expected_prev[2];
	end
	if (
		( c_state_expected_prev[3] !== 1'bx ) && ( c_state_prev[3] !== c_state_expected_prev[3] )
		&& ((c_state_expected_prev[3] !== last_c_state_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_state[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_state_expected_prev);
		$display ("     Real value = %b", c_state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_state_exp[3] = c_state_expected_prev[3];
	end
	if (
		( n_state_expected_prev[0] !== 1'bx ) && ( n_state_prev[0] !== n_state_expected_prev[0] )
		&& ((n_state_expected_prev[0] !== last_n_state_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n_state[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n_state_expected_prev);
		$display ("     Real value = %b", n_state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_n_state_exp[0] = n_state_expected_prev[0];
	end
	if (
		( n_state_expected_prev[1] !== 1'bx ) && ( n_state_prev[1] !== n_state_expected_prev[1] )
		&& ((n_state_expected_prev[1] !== last_n_state_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n_state[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n_state_expected_prev);
		$display ("     Real value = %b", n_state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_n_state_exp[1] = n_state_expected_prev[1];
	end
	if (
		( n_state_expected_prev[2] !== 1'bx ) && ( n_state_prev[2] !== n_state_expected_prev[2] )
		&& ((n_state_expected_prev[2] !== last_n_state_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n_state[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n_state_expected_prev);
		$display ("     Real value = %b", n_state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_n_state_exp[2] = n_state_expected_prev[2];
	end
	if (
		( n_state_expected_prev[3] !== 1'bx ) && ( n_state_prev[3] !== n_state_expected_prev[3] )
		&& ((n_state_expected_prev[3] !== last_n_state_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n_state[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n_state_expected_prev);
		$display ("     Real value = %b", n_state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_n_state_exp[3] = n_state_expected_prev[3];
	end
	if (
		( z_expected_prev !== 1'bx ) && ( z_prev !== z_expected_prev )
		&& ((z_expected_prev !== last_z_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port z :: @time = %t",  $realtime);
		$display ("     Expected value = %b", z_expected_prev);
		$display ("     Real value = %b", z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_z_exp = z_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module top_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg clr;
reg reset;
reg rst;
// wires                                               
wire [3:0] c_state;
wire [3:0] n_state;
wire z;

wire sampler;                             

// assign statements (if any)                          
top i1 (
// port map - connection between master ports and signals/registers   
	.c_state(c_state),
	.clk(clk),
	.clr(clr),
	.n_state(n_state),
	.reset(reset),
	.rst(rst),
	.z(z)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// clr
initial
begin
	clr = 1'b1;
	clr = #20000 1'b0;
	clr = #20000 1'b1;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #20000 1'b1;
end 

// rst
initial
begin
	rst = 1'b0;
	rst = #20000 1'b1;
end 

top_vlg_sample_tst tb_sample (
	.clk(clk),
	.clr(clr),
	.reset(reset),
	.rst(rst),
	.sampler_tx(sampler)
);

top_vlg_check_tst tb_out(
	.c_state(c_state),
	.n_state(n_state),
	.z(z),
	.sampler_rx(sampler)
);
endmodule

