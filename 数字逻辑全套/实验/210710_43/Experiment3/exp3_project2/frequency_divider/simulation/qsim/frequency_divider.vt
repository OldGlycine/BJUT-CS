// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/02/2022 16:08:49"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    frequency_divider
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module frequency_divider_vlg_sample_tst(
	clk_50mhz,
	rst,
	sampler_tx
);
input  clk_50mhz;
input  rst;
output sampler_tx;

reg sample;
time current_time;
always @(clk_50mhz or rst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module frequency_divider_vlg_check_tst (
	clk_1hz,
	clk_1khz,
	clk_10hz,
	clk_100hz,
	sampler_rx
);
input  clk_1hz;
input  clk_1khz;
input  clk_10hz;
input  clk_100hz;
input sampler_rx;

reg  clk_1hz_expected;
reg  clk_1khz_expected;
reg  clk_10hz_expected;
reg  clk_100hz_expected;

reg  clk_1hz_prev;
reg  clk_1khz_prev;
reg  clk_10hz_prev;
reg  clk_100hz_prev;

reg  clk_1hz_expected_prev;
reg  clk_1khz_expected_prev;
reg  clk_10hz_expected_prev;
reg  clk_100hz_expected_prev;

reg  last_clk_1hz_exp;
reg  last_clk_1khz_exp;
reg  last_clk_10hz_exp;
reg  last_clk_100hz_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	clk_1hz_prev = clk_1hz;
	clk_1khz_prev = clk_1khz;
	clk_10hz_prev = clk_10hz;
	clk_100hz_prev = clk_100hz;
end

// update expected /o prevs

always @(trigger)
begin
	clk_1hz_expected_prev = clk_1hz_expected;
	clk_1khz_expected_prev = clk_1khz_expected;
	clk_10hz_expected_prev = clk_10hz_expected;
	clk_100hz_expected_prev = clk_100hz_expected;
end



// expected clk_1hz
initial
begin
	clk_1hz_expected = 1'bX;
end 

// expected clk_1khz
initial
begin
	clk_1khz_expected = 1'bX;
end 

// expected clk_10hz
initial
begin
	clk_10hz_expected = 1'bX;
end 

// expected clk_100hz
initial
begin
	clk_100hz_expected = 1'bX;
end 
// generate trigger
always @(clk_1hz_expected or clk_1hz or clk_1khz_expected or clk_1khz or clk_10hz_expected or clk_10hz or clk_100hz_expected or clk_100hz)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected clk_1hz = %b | expected clk_1khz = %b | expected clk_10hz = %b | expected clk_100hz = %b | ",clk_1hz_expected_prev,clk_1khz_expected_prev,clk_10hz_expected_prev,clk_100hz_expected_prev);
	$display("| real clk_1hz = %b | real clk_1khz = %b | real clk_10hz = %b | real clk_100hz = %b | ",clk_1hz_prev,clk_1khz_prev,clk_10hz_prev,clk_100hz_prev);
`endif
	if (
		( clk_1hz_expected_prev !== 1'bx ) && ( clk_1hz_prev !== clk_1hz_expected_prev )
		&& ((clk_1hz_expected_prev !== last_clk_1hz_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clk_1hz :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clk_1hz_expected_prev);
		$display ("     Real value = %b", clk_1hz_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_clk_1hz_exp = clk_1hz_expected_prev;
	end
	if (
		( clk_1khz_expected_prev !== 1'bx ) && ( clk_1khz_prev !== clk_1khz_expected_prev )
		&& ((clk_1khz_expected_prev !== last_clk_1khz_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clk_1khz :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clk_1khz_expected_prev);
		$display ("     Real value = %b", clk_1khz_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_clk_1khz_exp = clk_1khz_expected_prev;
	end
	if (
		( clk_10hz_expected_prev !== 1'bx ) && ( clk_10hz_prev !== clk_10hz_expected_prev )
		&& ((clk_10hz_expected_prev !== last_clk_10hz_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clk_10hz :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clk_10hz_expected_prev);
		$display ("     Real value = %b", clk_10hz_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_clk_10hz_exp = clk_10hz_expected_prev;
	end
	if (
		( clk_100hz_expected_prev !== 1'bx ) && ( clk_100hz_prev !== clk_100hz_expected_prev )
		&& ((clk_100hz_expected_prev !== last_clk_100hz_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clk_100hz :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clk_100hz_expected_prev);
		$display ("     Real value = %b", clk_100hz_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_clk_100hz_exp = clk_100hz_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module frequency_divider_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk_50mhz;
reg rst;
// wires                                               
wire clk_1hz;
wire clk_1khz;
wire clk_10hz;
wire clk_100hz;

wire sampler;                             

// assign statements (if any)                          
frequency_divider i1 (
// port map - connection between master ports and signals/registers   
	.clk_1hz(clk_1hz),
	.clk_1khz(clk_1khz),
	.clk_10hz(clk_10hz),
	.clk_50mhz(clk_50mhz),
	.clk_100hz(clk_100hz),
	.rst(rst)
);

// clk_50mhz
always
begin
	clk_50mhz = 1'b0;
	clk_50mhz = #10000 1'b1;
	#10000;
end 

// rst
initial
begin
	rst = 1'b0;
	rst = #100000 1'b1;
end 

frequency_divider_vlg_sample_tst tb_sample (
	.clk_50mhz(clk_50mhz),
	.rst(rst),
	.sampler_tx(sampler)
);

frequency_divider_vlg_check_tst tb_out(
	.clk_1hz(clk_1hz),
	.clk_1khz(clk_1khz),
	.clk_10hz(clk_10hz),
	.clk_100hz(clk_100hz),
	.sampler_rx(sampler)
);
endmodule

