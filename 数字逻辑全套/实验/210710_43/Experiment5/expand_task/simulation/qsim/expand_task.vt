// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/06/2023 16:12:36"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    expand_task
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module expand_task_vlg_sample_tst(
	clk_50mhz,
	n_en,
	num_sel,
	swc,
	sampler_tx
);
input  clk_50mhz;
input  n_en;
input  num_sel;
input [3:0] swc;
output sampler_tx;

reg sample;
time current_time;
always @(clk_50mhz or n_en or num_sel or swc)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module expand_task_vlg_check_tst (
	ds,
	led,
	sampler_rx
);
input [7:0] ds;
input [6:0] led;
input sampler_rx;

reg [7:0] ds_expected;
reg [6:0] led_expected;

reg [7:0] ds_prev;
reg [6:0] led_prev;

reg [7:0] ds_expected_prev;
reg [6:0] led_expected_prev;

reg [7:0] last_ds_exp;
reg [6:0] last_led_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	ds_prev = ds;
	led_prev = led;
end

// update expected /o prevs

always @(trigger)
begin
	ds_expected_prev = ds_expected;
	led_expected_prev = led_expected;
end


// expected ds[ 7 ]
initial
begin
	ds_expected[7] = 1'bX;
end 
// expected ds[ 6 ]
initial
begin
	ds_expected[6] = 1'bX;
end 
// expected ds[ 5 ]
initial
begin
	ds_expected[5] = 1'bX;
end 
// expected ds[ 4 ]
initial
begin
	ds_expected[4] = 1'bX;
end 
// expected ds[ 3 ]
initial
begin
	ds_expected[3] = 1'bX;
end 
// expected ds[ 2 ]
initial
begin
	ds_expected[2] = 1'bX;
end 
// expected ds[ 1 ]
initial
begin
	ds_expected[1] = 1'bX;
end 
// expected ds[ 0 ]
initial
begin
	ds_expected[0] = 1'bX;
end 
// expected led[ 6 ]
initial
begin
	led_expected[6] = 1'bX;
end 
// expected led[ 5 ]
initial
begin
	led_expected[5] = 1'bX;
end 
// expected led[ 4 ]
initial
begin
	led_expected[4] = 1'bX;
end 
// expected led[ 3 ]
initial
begin
	led_expected[3] = 1'bX;
end 
// expected led[ 2 ]
initial
begin
	led_expected[2] = 1'bX;
end 
// expected led[ 1 ]
initial
begin
	led_expected[1] = 1'bX;
end 
// expected led[ 0 ]
initial
begin
	led_expected[0] = 1'bX;
end 
// generate trigger
always @(ds_expected or ds or led_expected or led)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ds = %b | expected led = %b | ",ds_expected_prev,led_expected_prev);
	$display("| real ds = %b | real led = %b | ",ds_prev,led_prev);
`endif
	if (
		( ds_expected_prev[0] !== 1'bx ) && ( ds_prev[0] !== ds_expected_prev[0] )
		&& ((ds_expected_prev[0] !== last_ds_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ds[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ds_expected_prev);
		$display ("     Real value = %b", ds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ds_exp[0] = ds_expected_prev[0];
	end
	if (
		( ds_expected_prev[1] !== 1'bx ) && ( ds_prev[1] !== ds_expected_prev[1] )
		&& ((ds_expected_prev[1] !== last_ds_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ds[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ds_expected_prev);
		$display ("     Real value = %b", ds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ds_exp[1] = ds_expected_prev[1];
	end
	if (
		( ds_expected_prev[2] !== 1'bx ) && ( ds_prev[2] !== ds_expected_prev[2] )
		&& ((ds_expected_prev[2] !== last_ds_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ds[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ds_expected_prev);
		$display ("     Real value = %b", ds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ds_exp[2] = ds_expected_prev[2];
	end
	if (
		( ds_expected_prev[3] !== 1'bx ) && ( ds_prev[3] !== ds_expected_prev[3] )
		&& ((ds_expected_prev[3] !== last_ds_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ds[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ds_expected_prev);
		$display ("     Real value = %b", ds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ds_exp[3] = ds_expected_prev[3];
	end
	if (
		( ds_expected_prev[4] !== 1'bx ) && ( ds_prev[4] !== ds_expected_prev[4] )
		&& ((ds_expected_prev[4] !== last_ds_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ds[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ds_expected_prev);
		$display ("     Real value = %b", ds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ds_exp[4] = ds_expected_prev[4];
	end
	if (
		( ds_expected_prev[5] !== 1'bx ) && ( ds_prev[5] !== ds_expected_prev[5] )
		&& ((ds_expected_prev[5] !== last_ds_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ds[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ds_expected_prev);
		$display ("     Real value = %b", ds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ds_exp[5] = ds_expected_prev[5];
	end
	if (
		( ds_expected_prev[6] !== 1'bx ) && ( ds_prev[6] !== ds_expected_prev[6] )
		&& ((ds_expected_prev[6] !== last_ds_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ds[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ds_expected_prev);
		$display ("     Real value = %b", ds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ds_exp[6] = ds_expected_prev[6];
	end
	if (
		( ds_expected_prev[7] !== 1'bx ) && ( ds_prev[7] !== ds_expected_prev[7] )
		&& ((ds_expected_prev[7] !== last_ds_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ds[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ds_expected_prev);
		$display ("     Real value = %b", ds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ds_exp[7] = ds_expected_prev[7];
	end
	if (
		( led_expected_prev[0] !== 1'bx ) && ( led_prev[0] !== led_expected_prev[0] )
		&& ((led_expected_prev[0] !== last_led_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_expected_prev);
		$display ("     Real value = %b", led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_led_exp[0] = led_expected_prev[0];
	end
	if (
		( led_expected_prev[1] !== 1'bx ) && ( led_prev[1] !== led_expected_prev[1] )
		&& ((led_expected_prev[1] !== last_led_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_expected_prev);
		$display ("     Real value = %b", led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_led_exp[1] = led_expected_prev[1];
	end
	if (
		( led_expected_prev[2] !== 1'bx ) && ( led_prev[2] !== led_expected_prev[2] )
		&& ((led_expected_prev[2] !== last_led_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_expected_prev);
		$display ("     Real value = %b", led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_led_exp[2] = led_expected_prev[2];
	end
	if (
		( led_expected_prev[3] !== 1'bx ) && ( led_prev[3] !== led_expected_prev[3] )
		&& ((led_expected_prev[3] !== last_led_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_expected_prev);
		$display ("     Real value = %b", led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_led_exp[3] = led_expected_prev[3];
	end
	if (
		( led_expected_prev[4] !== 1'bx ) && ( led_prev[4] !== led_expected_prev[4] )
		&& ((led_expected_prev[4] !== last_led_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_expected_prev);
		$display ("     Real value = %b", led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_led_exp[4] = led_expected_prev[4];
	end
	if (
		( led_expected_prev[5] !== 1'bx ) && ( led_prev[5] !== led_expected_prev[5] )
		&& ((led_expected_prev[5] !== last_led_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_expected_prev);
		$display ("     Real value = %b", led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_led_exp[5] = led_expected_prev[5];
	end
	if (
		( led_expected_prev[6] !== 1'bx ) && ( led_prev[6] !== led_expected_prev[6] )
		&& ((led_expected_prev[6] !== last_led_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_expected_prev);
		$display ("     Real value = %b", led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_led_exp[6] = led_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module expand_task_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk_50mhz;
reg n_en;
reg num_sel;
reg [3:0] swc;
// wires                                               
wire [7:0] ds;
wire [6:0] led;

wire sampler;                             

// assign statements (if any)                          
expand_task i1 (
// port map - connection between master ports and signals/registers   
	.clk_50mhz(clk_50mhz),
	.ds(ds),
	.led(led),
	.n_en(n_en),
	.num_sel(num_sel),
	.swc(swc)
);

// clk_50mhz
always
begin
	clk_50mhz = 1'b0;
	clk_50mhz = #10000 1'b1;
	#10000;
end 

// n_en
initial
begin
	n_en = 1'b0;
end 

// num_sel
initial
begin
	repeat(3)
	begin
		num_sel = 1'b0;
		num_sel = #160000 1'b1;
		# 160000;
	end
	num_sel = 1'b0;
end 
// swc[ 3 ]
initial
begin
	swc[3] = 1'b1;
end 
// swc[ 2 ]
initial
begin
	swc[2] = 1'b0;
end 
// swc[ 1 ]
initial
begin
	swc[1] = 1'b1;
end 
// swc[ 0 ]
initial
begin
	swc[0] = 1'b1;
end 

expand_task_vlg_sample_tst tb_sample (
	.clk_50mhz(clk_50mhz),
	.n_en(n_en),
	.num_sel(num_sel),
	.swc(swc),
	.sampler_tx(sampler)
);

expand_task_vlg_check_tst tb_out(
	.ds(ds),
	.led(led),
	.sampler_rx(sampler)
);
endmodule

