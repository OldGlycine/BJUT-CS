// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/14/2023 11:25:06"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    expand_task
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module expand_task_vlg_sample_tst(
	clk_50mhz,
	sampler_tx
);
input  clk_50mhz;
output sampler_tx;

reg sample;
time current_time;
always @(clk_50mhz)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module expand_task_vlg_check_tst (
	I_COL,
	I_ROW,
	out,
	sampler_rx
);
input [3:0] I_COL;
input [15:0] I_ROW;
input  out;
input sampler_rx;

reg [3:0] I_COL_expected;
reg [15:0] I_ROW_expected;
reg  out_expected;

reg [3:0] I_COL_prev;
reg [15:0] I_ROW_prev;
reg  out_prev;

reg [3:0] I_COL_expected_prev;
reg [15:0] I_ROW_expected_prev;
reg  out_expected_prev;

reg [3:0] last_I_COL_exp;
reg [15:0] last_I_ROW_exp;
reg  last_out_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	I_COL_prev = I_COL;
	I_ROW_prev = I_ROW;
	out_prev = out;
end

// update expected /o prevs

always @(trigger)
begin
	I_COL_expected_prev = I_COL_expected;
	I_ROW_expected_prev = I_ROW_expected;
	out_expected_prev = out_expected;
end


// expected I_COL[ 3 ]
initial
begin
	I_COL_expected[3] = 1'bX;
end 
// expected I_COL[ 2 ]
initial
begin
	I_COL_expected[2] = 1'bX;
end 
// expected I_COL[ 1 ]
initial
begin
	I_COL_expected[1] = 1'bX;
end 
// expected I_COL[ 0 ]
initial
begin
	I_COL_expected[0] = 1'bX;
end 
// expected I_ROW[ 15 ]
initial
begin
	I_ROW_expected[15] = 1'bX;
end 
// expected I_ROW[ 14 ]
initial
begin
	I_ROW_expected[14] = 1'bX;
end 
// expected I_ROW[ 13 ]
initial
begin
	I_ROW_expected[13] = 1'bX;
end 
// expected I_ROW[ 12 ]
initial
begin
	I_ROW_expected[12] = 1'bX;
end 
// expected I_ROW[ 11 ]
initial
begin
	I_ROW_expected[11] = 1'bX;
end 
// expected I_ROW[ 10 ]
initial
begin
	I_ROW_expected[10] = 1'bX;
end 
// expected I_ROW[ 9 ]
initial
begin
	I_ROW_expected[9] = 1'bX;
end 
// expected I_ROW[ 8 ]
initial
begin
	I_ROW_expected[8] = 1'bX;
end 
// expected I_ROW[ 7 ]
initial
begin
	I_ROW_expected[7] = 1'bX;
end 
// expected I_ROW[ 6 ]
initial
begin
	I_ROW_expected[6] = 1'bX;
end 
// expected I_ROW[ 5 ]
initial
begin
	I_ROW_expected[5] = 1'bX;
end 
// expected I_ROW[ 4 ]
initial
begin
	I_ROW_expected[4] = 1'bX;
end 
// expected I_ROW[ 3 ]
initial
begin
	I_ROW_expected[3] = 1'bX;
end 
// expected I_ROW[ 2 ]
initial
begin
	I_ROW_expected[2] = 1'bX;
end 
// expected I_ROW[ 1 ]
initial
begin
	I_ROW_expected[1] = 1'bX;
end 
// expected I_ROW[ 0 ]
initial
begin
	I_ROW_expected[0] = 1'bX;
end 

// expected out
initial
begin
	out_expected = 1'bX;
end 
// generate trigger
always @(I_COL_expected or I_COL or I_ROW_expected or I_ROW or out_expected or out)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected I_COL = %b | expected I_ROW = %b | expected out = %b | ",I_COL_expected_prev,I_ROW_expected_prev,out_expected_prev);
	$display("| real I_COL = %b | real I_ROW = %b | real out = %b | ",I_COL_prev,I_ROW_prev,out_prev);
`endif
	if (
		( I_COL_expected_prev[0] !== 1'bx ) && ( I_COL_prev[0] !== I_COL_expected_prev[0] )
		&& ((I_COL_expected_prev[0] !== last_I_COL_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_COL[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_COL_expected_prev);
		$display ("     Real value = %b", I_COL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_I_COL_exp[0] = I_COL_expected_prev[0];
	end
	if (
		( I_COL_expected_prev[1] !== 1'bx ) && ( I_COL_prev[1] !== I_COL_expected_prev[1] )
		&& ((I_COL_expected_prev[1] !== last_I_COL_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_COL[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_COL_expected_prev);
		$display ("     Real value = %b", I_COL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_I_COL_exp[1] = I_COL_expected_prev[1];
	end
	if (
		( I_COL_expected_prev[2] !== 1'bx ) && ( I_COL_prev[2] !== I_COL_expected_prev[2] )
		&& ((I_COL_expected_prev[2] !== last_I_COL_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_COL[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_COL_expected_prev);
		$display ("     Real value = %b", I_COL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_I_COL_exp[2] = I_COL_expected_prev[2];
	end
	if (
		( I_COL_expected_prev[3] !== 1'bx ) && ( I_COL_prev[3] !== I_COL_expected_prev[3] )
		&& ((I_COL_expected_prev[3] !== last_I_COL_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_COL[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_COL_expected_prev);
		$display ("     Real value = %b", I_COL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_I_COL_exp[3] = I_COL_expected_prev[3];
	end
	if (
		( I_ROW_expected_prev[0] !== 1'bx ) && ( I_ROW_prev[0] !== I_ROW_expected_prev[0] )
		&& ((I_ROW_expected_prev[0] !== last_I_ROW_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_ROW[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_ROW_expected_prev);
		$display ("     Real value = %b", I_ROW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_I_ROW_exp[0] = I_ROW_expected_prev[0];
	end
	if (
		( I_ROW_expected_prev[1] !== 1'bx ) && ( I_ROW_prev[1] !== I_ROW_expected_prev[1] )
		&& ((I_ROW_expected_prev[1] !== last_I_ROW_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_ROW[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_ROW_expected_prev);
		$display ("     Real value = %b", I_ROW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_I_ROW_exp[1] = I_ROW_expected_prev[1];
	end
	if (
		( I_ROW_expected_prev[2] !== 1'bx ) && ( I_ROW_prev[2] !== I_ROW_expected_prev[2] )
		&& ((I_ROW_expected_prev[2] !== last_I_ROW_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_ROW[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_ROW_expected_prev);
		$display ("     Real value = %b", I_ROW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_I_ROW_exp[2] = I_ROW_expected_prev[2];
	end
	if (
		( I_ROW_expected_prev[3] !== 1'bx ) && ( I_ROW_prev[3] !== I_ROW_expected_prev[3] )
		&& ((I_ROW_expected_prev[3] !== last_I_ROW_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_ROW[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_ROW_expected_prev);
		$display ("     Real value = %b", I_ROW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_I_ROW_exp[3] = I_ROW_expected_prev[3];
	end
	if (
		( I_ROW_expected_prev[4] !== 1'bx ) && ( I_ROW_prev[4] !== I_ROW_expected_prev[4] )
		&& ((I_ROW_expected_prev[4] !== last_I_ROW_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_ROW[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_ROW_expected_prev);
		$display ("     Real value = %b", I_ROW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_I_ROW_exp[4] = I_ROW_expected_prev[4];
	end
	if (
		( I_ROW_expected_prev[5] !== 1'bx ) && ( I_ROW_prev[5] !== I_ROW_expected_prev[5] )
		&& ((I_ROW_expected_prev[5] !== last_I_ROW_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_ROW[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_ROW_expected_prev);
		$display ("     Real value = %b", I_ROW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_I_ROW_exp[5] = I_ROW_expected_prev[5];
	end
	if (
		( I_ROW_expected_prev[6] !== 1'bx ) && ( I_ROW_prev[6] !== I_ROW_expected_prev[6] )
		&& ((I_ROW_expected_prev[6] !== last_I_ROW_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_ROW[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_ROW_expected_prev);
		$display ("     Real value = %b", I_ROW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_I_ROW_exp[6] = I_ROW_expected_prev[6];
	end
	if (
		( I_ROW_expected_prev[7] !== 1'bx ) && ( I_ROW_prev[7] !== I_ROW_expected_prev[7] )
		&& ((I_ROW_expected_prev[7] !== last_I_ROW_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_ROW[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_ROW_expected_prev);
		$display ("     Real value = %b", I_ROW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_I_ROW_exp[7] = I_ROW_expected_prev[7];
	end
	if (
		( I_ROW_expected_prev[8] !== 1'bx ) && ( I_ROW_prev[8] !== I_ROW_expected_prev[8] )
		&& ((I_ROW_expected_prev[8] !== last_I_ROW_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_ROW[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_ROW_expected_prev);
		$display ("     Real value = %b", I_ROW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_I_ROW_exp[8] = I_ROW_expected_prev[8];
	end
	if (
		( I_ROW_expected_prev[9] !== 1'bx ) && ( I_ROW_prev[9] !== I_ROW_expected_prev[9] )
		&& ((I_ROW_expected_prev[9] !== last_I_ROW_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_ROW[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_ROW_expected_prev);
		$display ("     Real value = %b", I_ROW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_I_ROW_exp[9] = I_ROW_expected_prev[9];
	end
	if (
		( I_ROW_expected_prev[10] !== 1'bx ) && ( I_ROW_prev[10] !== I_ROW_expected_prev[10] )
		&& ((I_ROW_expected_prev[10] !== last_I_ROW_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_ROW[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_ROW_expected_prev);
		$display ("     Real value = %b", I_ROW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_I_ROW_exp[10] = I_ROW_expected_prev[10];
	end
	if (
		( I_ROW_expected_prev[11] !== 1'bx ) && ( I_ROW_prev[11] !== I_ROW_expected_prev[11] )
		&& ((I_ROW_expected_prev[11] !== last_I_ROW_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_ROW[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_ROW_expected_prev);
		$display ("     Real value = %b", I_ROW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_I_ROW_exp[11] = I_ROW_expected_prev[11];
	end
	if (
		( I_ROW_expected_prev[12] !== 1'bx ) && ( I_ROW_prev[12] !== I_ROW_expected_prev[12] )
		&& ((I_ROW_expected_prev[12] !== last_I_ROW_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_ROW[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_ROW_expected_prev);
		$display ("     Real value = %b", I_ROW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_I_ROW_exp[12] = I_ROW_expected_prev[12];
	end
	if (
		( I_ROW_expected_prev[13] !== 1'bx ) && ( I_ROW_prev[13] !== I_ROW_expected_prev[13] )
		&& ((I_ROW_expected_prev[13] !== last_I_ROW_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_ROW[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_ROW_expected_prev);
		$display ("     Real value = %b", I_ROW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_I_ROW_exp[13] = I_ROW_expected_prev[13];
	end
	if (
		( I_ROW_expected_prev[14] !== 1'bx ) && ( I_ROW_prev[14] !== I_ROW_expected_prev[14] )
		&& ((I_ROW_expected_prev[14] !== last_I_ROW_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_ROW[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_ROW_expected_prev);
		$display ("     Real value = %b", I_ROW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_I_ROW_exp[14] = I_ROW_expected_prev[14];
	end
	if (
		( I_ROW_expected_prev[15] !== 1'bx ) && ( I_ROW_prev[15] !== I_ROW_expected_prev[15] )
		&& ((I_ROW_expected_prev[15] !== last_I_ROW_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_ROW[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_ROW_expected_prev);
		$display ("     Real value = %b", I_ROW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_I_ROW_exp[15] = I_ROW_expected_prev[15];
	end
	if (
		( out_expected_prev !== 1'bx ) && ( out_prev !== out_expected_prev )
		&& ((out_expected_prev !== last_out_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out_exp = out_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module expand_task_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk_50mhz;
// wires                                               
wire [3:0] I_COL;
wire [15:0] I_ROW;
wire out;

wire sampler;                             

// assign statements (if any)                          
expand_task i1 (
// port map - connection between master ports and signals/registers   
	.I_COL(I_COL),
	.I_ROW(I_ROW),
	.clk_50mhz(clk_50mhz),
	.out(out)
);

// clk_50mhz
initial
begin
	clk_50mhz = 1'b0;
	clk_50mhz = #22000 1'b1;
	# 2000;
	repeat(244)
	begin
		clk_50mhz = 1'b0;
		clk_50mhz = #2000 1'b1;
		# 2000;
	end
end 

expand_task_vlg_sample_tst tb_sample (
	.clk_50mhz(clk_50mhz),
	.sampler_tx(sampler)
);

expand_task_vlg_check_tst tb_out(
	.I_COL(I_COL),
	.I_ROW(I_ROW),
	.out(out),
	.sampler_rx(sampler)
);
endmodule

