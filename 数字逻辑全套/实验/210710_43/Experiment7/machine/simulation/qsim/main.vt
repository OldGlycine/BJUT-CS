// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/21/2023 21:27:00"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    main
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module main_vlg_sample_tst(
	clk,
	r,
	rules,
	start,
	stop,
	y,
	sampler_tx
);
input  clk;
input [5:0] r;
input [1:0] rules;
input  start;
input  stop;
input [5:0] y;
output sampler_tx;

reg sample;
time current_time;
always @(clk or r or rules or start or stop or y)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module main_vlg_check_tst (
	LEWG,
	LEWR,
	LEWY,
	LSNG,
	LSNR,
	LSNY,
	c_state,
	condition,
	left,
	n_state,
	r_count,
	ring,
	turn_out,
	y_count,
	sampler_rx
);
input  LEWG;
input  LEWR;
input  LEWY;
input  LSNG;
input  LSNR;
input  LSNY;
input [2:0] c_state;
input [31:0] condition;
input  left;
input [2:0] n_state;
input [5:0] r_count;
input [1:0] ring;
input [1:0] turn_out;
input [5:0] y_count;
input sampler_rx;

reg  LEWG_expected;
reg  LEWR_expected;
reg  LEWY_expected;
reg  LSNG_expected;
reg  LSNR_expected;
reg  LSNY_expected;
reg [2:0] c_state_expected;
reg [31:0] condition_expected;
reg  left_expected;
reg [2:0] n_state_expected;
reg [5:0] r_count_expected;
reg [1:0] ring_expected;
reg [1:0] turn_out_expected;
reg [5:0] y_count_expected;

reg  LEWG_prev;
reg  LEWR_prev;
reg  LEWY_prev;
reg  LSNG_prev;
reg  LSNR_prev;
reg  LSNY_prev;
reg [2:0] c_state_prev;
reg [31:0] condition_prev;
reg  left_prev;
reg [2:0] n_state_prev;
reg [5:0] r_count_prev;
reg [1:0] ring_prev;
reg [1:0] turn_out_prev;
reg [5:0] y_count_prev;

reg  LEWG_expected_prev;
reg  LEWR_expected_prev;
reg  LEWY_expected_prev;
reg  LSNG_expected_prev;
reg  LSNR_expected_prev;
reg  LSNY_expected_prev;
reg [2:0] c_state_expected_prev;
reg [31:0] condition_expected_prev;
reg  left_expected_prev;
reg [2:0] n_state_expected_prev;
reg [5:0] r_count_expected_prev;
reg [1:0] ring_expected_prev;
reg [1:0] turn_out_expected_prev;
reg [5:0] y_count_expected_prev;

reg  last_LEWG_exp;
reg  last_LEWR_exp;
reg  last_LEWY_exp;
reg  last_LSNG_exp;
reg  last_LSNR_exp;
reg  last_LSNY_exp;
reg [2:0] last_c_state_exp;
reg [31:0] last_condition_exp;
reg  last_left_exp;
reg [2:0] last_n_state_exp;
reg [5:0] last_r_count_exp;
reg [1:0] last_ring_exp;
reg [1:0] last_turn_out_exp;
reg [5:0] last_y_count_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:14] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 14'b1;
end

// update real /o prevs

always @(trigger)
begin
	LEWG_prev = LEWG;
	LEWR_prev = LEWR;
	LEWY_prev = LEWY;
	LSNG_prev = LSNG;
	LSNR_prev = LSNR;
	LSNY_prev = LSNY;
	c_state_prev = c_state;
	condition_prev = condition;
	left_prev = left;
	n_state_prev = n_state;
	r_count_prev = r_count;
	ring_prev = ring;
	turn_out_prev = turn_out;
	y_count_prev = y_count;
end

// update expected /o prevs

always @(trigger)
begin
	LEWG_expected_prev = LEWG_expected;
	LEWR_expected_prev = LEWR_expected;
	LEWY_expected_prev = LEWY_expected;
	LSNG_expected_prev = LSNG_expected;
	LSNR_expected_prev = LSNR_expected;
	LSNY_expected_prev = LSNY_expected;
	c_state_expected_prev = c_state_expected;
	condition_expected_prev = condition_expected;
	left_expected_prev = left_expected;
	n_state_expected_prev = n_state_expected;
	r_count_expected_prev = r_count_expected;
	ring_expected_prev = ring_expected;
	turn_out_expected_prev = turn_out_expected;
	y_count_expected_prev = y_count_expected;
end



// expected LEWG
initial
begin
	LEWG_expected = 1'bX;
end 

// expected LEWR
initial
begin
	LEWR_expected = 1'bX;
end 

// expected LEWY
initial
begin
	LEWY_expected = 1'bX;
end 

// expected LSNG
initial
begin
	LSNG_expected = 1'bX;
end 

// expected LSNR
initial
begin
	LSNR_expected = 1'bX;
end 

// expected LSNY
initial
begin
	LSNY_expected = 1'bX;
end 

// expected left
initial
begin
	left_expected = 1'bX;
end 
// expected r_count[ 5 ]
initial
begin
	r_count_expected[5] = 1'bX;
end 
// expected r_count[ 4 ]
initial
begin
	r_count_expected[4] = 1'bX;
end 
// expected r_count[ 3 ]
initial
begin
	r_count_expected[3] = 1'bX;
end 
// expected r_count[ 2 ]
initial
begin
	r_count_expected[2] = 1'bX;
end 
// expected r_count[ 1 ]
initial
begin
	r_count_expected[1] = 1'bX;
end 
// expected r_count[ 0 ]
initial
begin
	r_count_expected[0] = 1'bX;
end 
// expected ring[ 1 ]
initial
begin
	ring_expected[1] = 1'bX;
end 
// expected ring[ 0 ]
initial
begin
	ring_expected[0] = 1'bX;
end 
// expected turn_out[ 1 ]
initial
begin
	turn_out_expected[1] = 1'bX;
end 
// expected turn_out[ 0 ]
initial
begin
	turn_out_expected[0] = 1'bX;
end 
// expected y_count[ 5 ]
initial
begin
	y_count_expected[5] = 1'bX;
end 
// expected y_count[ 4 ]
initial
begin
	y_count_expected[4] = 1'bX;
end 
// expected y_count[ 3 ]
initial
begin
	y_count_expected[3] = 1'bX;
end 
// expected y_count[ 2 ]
initial
begin
	y_count_expected[2] = 1'bX;
end 
// expected y_count[ 1 ]
initial
begin
	y_count_expected[1] = 1'bX;
end 
// expected y_count[ 0 ]
initial
begin
	y_count_expected[0] = 1'bX;
end 
// expected c_state[ 2 ]
initial
begin
	c_state_expected[2] = 1'bX;
end 
// expected c_state[ 1 ]
initial
begin
	c_state_expected[1] = 1'bX;
end 
// expected c_state[ 0 ]
initial
begin
	c_state_expected[0] = 1'bX;
end 
// expected n_state[ 2 ]
initial
begin
	n_state_expected[2] = 1'bX;
end 
// expected n_state[ 1 ]
initial
begin
	n_state_expected[1] = 1'bX;
end 
// expected n_state[ 0 ]
initial
begin
	n_state_expected[0] = 1'bX;
end 
// expected condition[ 31 ]
initial
begin
	condition_expected[31] = 1'bX;
end 
// expected condition[ 30 ]
initial
begin
	condition_expected[30] = 1'bX;
end 
// expected condition[ 29 ]
initial
begin
	condition_expected[29] = 1'bX;
end 
// expected condition[ 28 ]
initial
begin
	condition_expected[28] = 1'bX;
end 
// expected condition[ 27 ]
initial
begin
	condition_expected[27] = 1'bX;
end 
// expected condition[ 26 ]
initial
begin
	condition_expected[26] = 1'bX;
end 
// expected condition[ 25 ]
initial
begin
	condition_expected[25] = 1'bX;
end 
// expected condition[ 24 ]
initial
begin
	condition_expected[24] = 1'bX;
end 
// expected condition[ 23 ]
initial
begin
	condition_expected[23] = 1'bX;
end 
// expected condition[ 22 ]
initial
begin
	condition_expected[22] = 1'bX;
end 
// expected condition[ 21 ]
initial
begin
	condition_expected[21] = 1'bX;
end 
// expected condition[ 20 ]
initial
begin
	condition_expected[20] = 1'bX;
end 
// expected condition[ 19 ]
initial
begin
	condition_expected[19] = 1'bX;
end 
// expected condition[ 18 ]
initial
begin
	condition_expected[18] = 1'bX;
end 
// expected condition[ 17 ]
initial
begin
	condition_expected[17] = 1'bX;
end 
// expected condition[ 16 ]
initial
begin
	condition_expected[16] = 1'bX;
end 
// expected condition[ 15 ]
initial
begin
	condition_expected[15] = 1'bX;
end 
// expected condition[ 14 ]
initial
begin
	condition_expected[14] = 1'bX;
end 
// expected condition[ 13 ]
initial
begin
	condition_expected[13] = 1'bX;
end 
// expected condition[ 12 ]
initial
begin
	condition_expected[12] = 1'bX;
end 
// expected condition[ 11 ]
initial
begin
	condition_expected[11] = 1'bX;
end 
// expected condition[ 10 ]
initial
begin
	condition_expected[10] = 1'bX;
end 
// expected condition[ 9 ]
initial
begin
	condition_expected[9] = 1'bX;
end 
// expected condition[ 8 ]
initial
begin
	condition_expected[8] = 1'bX;
end 
// expected condition[ 7 ]
initial
begin
	condition_expected[7] = 1'bX;
end 
// expected condition[ 6 ]
initial
begin
	condition_expected[6] = 1'bX;
end 
// expected condition[ 5 ]
initial
begin
	condition_expected[5] = 1'bX;
end 
// expected condition[ 4 ]
initial
begin
	condition_expected[4] = 1'bX;
end 
// expected condition[ 3 ]
initial
begin
	condition_expected[3] = 1'bX;
end 
// expected condition[ 2 ]
initial
begin
	condition_expected[2] = 1'bX;
end 
// expected condition[ 1 ]
initial
begin
	condition_expected[1] = 1'bX;
end 
// expected condition[ 0 ]
initial
begin
	condition_expected[0] = 1'bX;
end 
// generate trigger
always @(LEWG_expected or LEWG or LEWR_expected or LEWR or LEWY_expected or LEWY or LSNG_expected or LSNG or LSNR_expected or LSNR or LSNY_expected or LSNY or c_state_expected or c_state or condition_expected or condition or left_expected or left or n_state_expected or n_state or r_count_expected or r_count or ring_expected or ring or turn_out_expected or turn_out or y_count_expected or y_count)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected LEWG = %b | expected LEWR = %b | expected LEWY = %b | expected LSNG = %b | expected LSNR = %b | expected LSNY = %b | expected c_state = %b | expected condition = %b | expected left = %b | expected n_state = %b | expected r_count = %b | expected ring = %b | expected turn_out = %b | expected y_count = %b | ",LEWG_expected_prev,LEWR_expected_prev,LEWY_expected_prev,LSNG_expected_prev,LSNR_expected_prev,LSNY_expected_prev,c_state_expected_prev,condition_expected_prev,left_expected_prev,n_state_expected_prev,r_count_expected_prev,ring_expected_prev,turn_out_expected_prev,y_count_expected_prev);
	$display("| real LEWG = %b | real LEWR = %b | real LEWY = %b | real LSNG = %b | real LSNR = %b | real LSNY = %b | real c_state = %b | real condition = %b | real left = %b | real n_state = %b | real r_count = %b | real ring = %b | real turn_out = %b | real y_count = %b | ",LEWG_prev,LEWR_prev,LEWY_prev,LSNG_prev,LSNR_prev,LSNY_prev,c_state_prev,condition_prev,left_prev,n_state_prev,r_count_prev,ring_prev,turn_out_prev,y_count_prev);
`endif
	if (
		( LEWG_expected_prev !== 1'bx ) && ( LEWG_prev !== LEWG_expected_prev )
		&& ((LEWG_expected_prev !== last_LEWG_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEWG :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEWG_expected_prev);
		$display ("     Real value = %b", LEWG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LEWG_exp = LEWG_expected_prev;
	end
	if (
		( LEWR_expected_prev !== 1'bx ) && ( LEWR_prev !== LEWR_expected_prev )
		&& ((LEWR_expected_prev !== last_LEWR_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEWR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEWR_expected_prev);
		$display ("     Real value = %b", LEWR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LEWR_exp = LEWR_expected_prev;
	end
	if (
		( LEWY_expected_prev !== 1'bx ) && ( LEWY_prev !== LEWY_expected_prev )
		&& ((LEWY_expected_prev !== last_LEWY_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEWY :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEWY_expected_prev);
		$display ("     Real value = %b", LEWY_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LEWY_exp = LEWY_expected_prev;
	end
	if (
		( LSNG_expected_prev !== 1'bx ) && ( LSNG_prev !== LSNG_expected_prev )
		&& ((LSNG_expected_prev !== last_LSNG_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LSNG :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LSNG_expected_prev);
		$display ("     Real value = %b", LSNG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_LSNG_exp = LSNG_expected_prev;
	end
	if (
		( LSNR_expected_prev !== 1'bx ) && ( LSNR_prev !== LSNR_expected_prev )
		&& ((LSNR_expected_prev !== last_LSNR_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LSNR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LSNR_expected_prev);
		$display ("     Real value = %b", LSNR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_LSNR_exp = LSNR_expected_prev;
	end
	if (
		( LSNY_expected_prev !== 1'bx ) && ( LSNY_prev !== LSNY_expected_prev )
		&& ((LSNY_expected_prev !== last_LSNY_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LSNY :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LSNY_expected_prev);
		$display ("     Real value = %b", LSNY_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_LSNY_exp = LSNY_expected_prev;
	end
	if (
		( c_state_expected_prev[0] !== 1'bx ) && ( c_state_prev[0] !== c_state_expected_prev[0] )
		&& ((c_state_expected_prev[0] !== last_c_state_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_state[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_state_expected_prev);
		$display ("     Real value = %b", c_state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_c_state_exp[0] = c_state_expected_prev[0];
	end
	if (
		( c_state_expected_prev[1] !== 1'bx ) && ( c_state_prev[1] !== c_state_expected_prev[1] )
		&& ((c_state_expected_prev[1] !== last_c_state_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_state[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_state_expected_prev);
		$display ("     Real value = %b", c_state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_c_state_exp[1] = c_state_expected_prev[1];
	end
	if (
		( c_state_expected_prev[2] !== 1'bx ) && ( c_state_prev[2] !== c_state_expected_prev[2] )
		&& ((c_state_expected_prev[2] !== last_c_state_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_state[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_state_expected_prev);
		$display ("     Real value = %b", c_state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_c_state_exp[2] = c_state_expected_prev[2];
	end
	if (
		( condition_expected_prev[0] !== 1'bx ) && ( condition_prev[0] !== condition_expected_prev[0] )
		&& ((condition_expected_prev[0] !== last_condition_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port condition[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", condition_expected_prev);
		$display ("     Real value = %b", condition_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_condition_exp[0] = condition_expected_prev[0];
	end
	if (
		( condition_expected_prev[1] !== 1'bx ) && ( condition_prev[1] !== condition_expected_prev[1] )
		&& ((condition_expected_prev[1] !== last_condition_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port condition[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", condition_expected_prev);
		$display ("     Real value = %b", condition_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_condition_exp[1] = condition_expected_prev[1];
	end
	if (
		( condition_expected_prev[2] !== 1'bx ) && ( condition_prev[2] !== condition_expected_prev[2] )
		&& ((condition_expected_prev[2] !== last_condition_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port condition[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", condition_expected_prev);
		$display ("     Real value = %b", condition_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_condition_exp[2] = condition_expected_prev[2];
	end
	if (
		( condition_expected_prev[3] !== 1'bx ) && ( condition_prev[3] !== condition_expected_prev[3] )
		&& ((condition_expected_prev[3] !== last_condition_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port condition[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", condition_expected_prev);
		$display ("     Real value = %b", condition_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_condition_exp[3] = condition_expected_prev[3];
	end
	if (
		( condition_expected_prev[4] !== 1'bx ) && ( condition_prev[4] !== condition_expected_prev[4] )
		&& ((condition_expected_prev[4] !== last_condition_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port condition[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", condition_expected_prev);
		$display ("     Real value = %b", condition_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_condition_exp[4] = condition_expected_prev[4];
	end
	if (
		( condition_expected_prev[5] !== 1'bx ) && ( condition_prev[5] !== condition_expected_prev[5] )
		&& ((condition_expected_prev[5] !== last_condition_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port condition[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", condition_expected_prev);
		$display ("     Real value = %b", condition_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_condition_exp[5] = condition_expected_prev[5];
	end
	if (
		( condition_expected_prev[6] !== 1'bx ) && ( condition_prev[6] !== condition_expected_prev[6] )
		&& ((condition_expected_prev[6] !== last_condition_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port condition[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", condition_expected_prev);
		$display ("     Real value = %b", condition_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_condition_exp[6] = condition_expected_prev[6];
	end
	if (
		( condition_expected_prev[7] !== 1'bx ) && ( condition_prev[7] !== condition_expected_prev[7] )
		&& ((condition_expected_prev[7] !== last_condition_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port condition[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", condition_expected_prev);
		$display ("     Real value = %b", condition_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_condition_exp[7] = condition_expected_prev[7];
	end
	if (
		( condition_expected_prev[8] !== 1'bx ) && ( condition_prev[8] !== condition_expected_prev[8] )
		&& ((condition_expected_prev[8] !== last_condition_exp[8]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port condition[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", condition_expected_prev);
		$display ("     Real value = %b", condition_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_condition_exp[8] = condition_expected_prev[8];
	end
	if (
		( condition_expected_prev[9] !== 1'bx ) && ( condition_prev[9] !== condition_expected_prev[9] )
		&& ((condition_expected_prev[9] !== last_condition_exp[9]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port condition[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", condition_expected_prev);
		$display ("     Real value = %b", condition_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_condition_exp[9] = condition_expected_prev[9];
	end
	if (
		( condition_expected_prev[10] !== 1'bx ) && ( condition_prev[10] !== condition_expected_prev[10] )
		&& ((condition_expected_prev[10] !== last_condition_exp[10]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port condition[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", condition_expected_prev);
		$display ("     Real value = %b", condition_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_condition_exp[10] = condition_expected_prev[10];
	end
	if (
		( condition_expected_prev[11] !== 1'bx ) && ( condition_prev[11] !== condition_expected_prev[11] )
		&& ((condition_expected_prev[11] !== last_condition_exp[11]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port condition[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", condition_expected_prev);
		$display ("     Real value = %b", condition_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_condition_exp[11] = condition_expected_prev[11];
	end
	if (
		( condition_expected_prev[12] !== 1'bx ) && ( condition_prev[12] !== condition_expected_prev[12] )
		&& ((condition_expected_prev[12] !== last_condition_exp[12]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port condition[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", condition_expected_prev);
		$display ("     Real value = %b", condition_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_condition_exp[12] = condition_expected_prev[12];
	end
	if (
		( condition_expected_prev[13] !== 1'bx ) && ( condition_prev[13] !== condition_expected_prev[13] )
		&& ((condition_expected_prev[13] !== last_condition_exp[13]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port condition[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", condition_expected_prev);
		$display ("     Real value = %b", condition_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_condition_exp[13] = condition_expected_prev[13];
	end
	if (
		( condition_expected_prev[14] !== 1'bx ) && ( condition_prev[14] !== condition_expected_prev[14] )
		&& ((condition_expected_prev[14] !== last_condition_exp[14]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port condition[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", condition_expected_prev);
		$display ("     Real value = %b", condition_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_condition_exp[14] = condition_expected_prev[14];
	end
	if (
		( condition_expected_prev[15] !== 1'bx ) && ( condition_prev[15] !== condition_expected_prev[15] )
		&& ((condition_expected_prev[15] !== last_condition_exp[15]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port condition[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", condition_expected_prev);
		$display ("     Real value = %b", condition_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_condition_exp[15] = condition_expected_prev[15];
	end
	if (
		( condition_expected_prev[16] !== 1'bx ) && ( condition_prev[16] !== condition_expected_prev[16] )
		&& ((condition_expected_prev[16] !== last_condition_exp[16]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port condition[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", condition_expected_prev);
		$display ("     Real value = %b", condition_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_condition_exp[16] = condition_expected_prev[16];
	end
	if (
		( condition_expected_prev[17] !== 1'bx ) && ( condition_prev[17] !== condition_expected_prev[17] )
		&& ((condition_expected_prev[17] !== last_condition_exp[17]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port condition[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", condition_expected_prev);
		$display ("     Real value = %b", condition_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_condition_exp[17] = condition_expected_prev[17];
	end
	if (
		( condition_expected_prev[18] !== 1'bx ) && ( condition_prev[18] !== condition_expected_prev[18] )
		&& ((condition_expected_prev[18] !== last_condition_exp[18]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port condition[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", condition_expected_prev);
		$display ("     Real value = %b", condition_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_condition_exp[18] = condition_expected_prev[18];
	end
	if (
		( condition_expected_prev[19] !== 1'bx ) && ( condition_prev[19] !== condition_expected_prev[19] )
		&& ((condition_expected_prev[19] !== last_condition_exp[19]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port condition[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", condition_expected_prev);
		$display ("     Real value = %b", condition_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_condition_exp[19] = condition_expected_prev[19];
	end
	if (
		( condition_expected_prev[20] !== 1'bx ) && ( condition_prev[20] !== condition_expected_prev[20] )
		&& ((condition_expected_prev[20] !== last_condition_exp[20]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port condition[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", condition_expected_prev);
		$display ("     Real value = %b", condition_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_condition_exp[20] = condition_expected_prev[20];
	end
	if (
		( condition_expected_prev[21] !== 1'bx ) && ( condition_prev[21] !== condition_expected_prev[21] )
		&& ((condition_expected_prev[21] !== last_condition_exp[21]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port condition[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", condition_expected_prev);
		$display ("     Real value = %b", condition_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_condition_exp[21] = condition_expected_prev[21];
	end
	if (
		( condition_expected_prev[22] !== 1'bx ) && ( condition_prev[22] !== condition_expected_prev[22] )
		&& ((condition_expected_prev[22] !== last_condition_exp[22]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port condition[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", condition_expected_prev);
		$display ("     Real value = %b", condition_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_condition_exp[22] = condition_expected_prev[22];
	end
	if (
		( condition_expected_prev[23] !== 1'bx ) && ( condition_prev[23] !== condition_expected_prev[23] )
		&& ((condition_expected_prev[23] !== last_condition_exp[23]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port condition[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", condition_expected_prev);
		$display ("     Real value = %b", condition_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_condition_exp[23] = condition_expected_prev[23];
	end
	if (
		( condition_expected_prev[24] !== 1'bx ) && ( condition_prev[24] !== condition_expected_prev[24] )
		&& ((condition_expected_prev[24] !== last_condition_exp[24]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port condition[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", condition_expected_prev);
		$display ("     Real value = %b", condition_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_condition_exp[24] = condition_expected_prev[24];
	end
	if (
		( condition_expected_prev[25] !== 1'bx ) && ( condition_prev[25] !== condition_expected_prev[25] )
		&& ((condition_expected_prev[25] !== last_condition_exp[25]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port condition[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", condition_expected_prev);
		$display ("     Real value = %b", condition_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_condition_exp[25] = condition_expected_prev[25];
	end
	if (
		( condition_expected_prev[26] !== 1'bx ) && ( condition_prev[26] !== condition_expected_prev[26] )
		&& ((condition_expected_prev[26] !== last_condition_exp[26]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port condition[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", condition_expected_prev);
		$display ("     Real value = %b", condition_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_condition_exp[26] = condition_expected_prev[26];
	end
	if (
		( condition_expected_prev[27] !== 1'bx ) && ( condition_prev[27] !== condition_expected_prev[27] )
		&& ((condition_expected_prev[27] !== last_condition_exp[27]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port condition[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", condition_expected_prev);
		$display ("     Real value = %b", condition_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_condition_exp[27] = condition_expected_prev[27];
	end
	if (
		( condition_expected_prev[28] !== 1'bx ) && ( condition_prev[28] !== condition_expected_prev[28] )
		&& ((condition_expected_prev[28] !== last_condition_exp[28]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port condition[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", condition_expected_prev);
		$display ("     Real value = %b", condition_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_condition_exp[28] = condition_expected_prev[28];
	end
	if (
		( condition_expected_prev[29] !== 1'bx ) && ( condition_prev[29] !== condition_expected_prev[29] )
		&& ((condition_expected_prev[29] !== last_condition_exp[29]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port condition[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", condition_expected_prev);
		$display ("     Real value = %b", condition_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_condition_exp[29] = condition_expected_prev[29];
	end
	if (
		( condition_expected_prev[30] !== 1'bx ) && ( condition_prev[30] !== condition_expected_prev[30] )
		&& ((condition_expected_prev[30] !== last_condition_exp[30]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port condition[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", condition_expected_prev);
		$display ("     Real value = %b", condition_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_condition_exp[30] = condition_expected_prev[30];
	end
	if (
		( condition_expected_prev[31] !== 1'bx ) && ( condition_prev[31] !== condition_expected_prev[31] )
		&& ((condition_expected_prev[31] !== last_condition_exp[31]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port condition[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", condition_expected_prev);
		$display ("     Real value = %b", condition_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_condition_exp[31] = condition_expected_prev[31];
	end
	if (
		( left_expected_prev !== 1'bx ) && ( left_prev !== left_expected_prev )
		&& ((left_expected_prev !== last_left_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port left :: @time = %t",  $realtime);
		$display ("     Expected value = %b", left_expected_prev);
		$display ("     Real value = %b", left_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_left_exp = left_expected_prev;
	end
	if (
		( n_state_expected_prev[0] !== 1'bx ) && ( n_state_prev[0] !== n_state_expected_prev[0] )
		&& ((n_state_expected_prev[0] !== last_n_state_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n_state[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n_state_expected_prev);
		$display ("     Real value = %b", n_state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_n_state_exp[0] = n_state_expected_prev[0];
	end
	if (
		( n_state_expected_prev[1] !== 1'bx ) && ( n_state_prev[1] !== n_state_expected_prev[1] )
		&& ((n_state_expected_prev[1] !== last_n_state_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n_state[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n_state_expected_prev);
		$display ("     Real value = %b", n_state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_n_state_exp[1] = n_state_expected_prev[1];
	end
	if (
		( n_state_expected_prev[2] !== 1'bx ) && ( n_state_prev[2] !== n_state_expected_prev[2] )
		&& ((n_state_expected_prev[2] !== last_n_state_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n_state[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n_state_expected_prev);
		$display ("     Real value = %b", n_state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_n_state_exp[2] = n_state_expected_prev[2];
	end
	if (
		( r_count_expected_prev[0] !== 1'bx ) && ( r_count_prev[0] !== r_count_expected_prev[0] )
		&& ((r_count_expected_prev[0] !== last_r_count_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r_count[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r_count_expected_prev);
		$display ("     Real value = %b", r_count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_r_count_exp[0] = r_count_expected_prev[0];
	end
	if (
		( r_count_expected_prev[1] !== 1'bx ) && ( r_count_prev[1] !== r_count_expected_prev[1] )
		&& ((r_count_expected_prev[1] !== last_r_count_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r_count[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r_count_expected_prev);
		$display ("     Real value = %b", r_count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_r_count_exp[1] = r_count_expected_prev[1];
	end
	if (
		( r_count_expected_prev[2] !== 1'bx ) && ( r_count_prev[2] !== r_count_expected_prev[2] )
		&& ((r_count_expected_prev[2] !== last_r_count_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r_count[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r_count_expected_prev);
		$display ("     Real value = %b", r_count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_r_count_exp[2] = r_count_expected_prev[2];
	end
	if (
		( r_count_expected_prev[3] !== 1'bx ) && ( r_count_prev[3] !== r_count_expected_prev[3] )
		&& ((r_count_expected_prev[3] !== last_r_count_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r_count[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r_count_expected_prev);
		$display ("     Real value = %b", r_count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_r_count_exp[3] = r_count_expected_prev[3];
	end
	if (
		( r_count_expected_prev[4] !== 1'bx ) && ( r_count_prev[4] !== r_count_expected_prev[4] )
		&& ((r_count_expected_prev[4] !== last_r_count_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r_count[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r_count_expected_prev);
		$display ("     Real value = %b", r_count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_r_count_exp[4] = r_count_expected_prev[4];
	end
	if (
		( r_count_expected_prev[5] !== 1'bx ) && ( r_count_prev[5] !== r_count_expected_prev[5] )
		&& ((r_count_expected_prev[5] !== last_r_count_exp[5]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r_count[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r_count_expected_prev);
		$display ("     Real value = %b", r_count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_r_count_exp[5] = r_count_expected_prev[5];
	end
	if (
		( ring_expected_prev[0] !== 1'bx ) && ( ring_prev[0] !== ring_expected_prev[0] )
		&& ((ring_expected_prev[0] !== last_ring_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ring[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ring_expected_prev);
		$display ("     Real value = %b", ring_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ring_exp[0] = ring_expected_prev[0];
	end
	if (
		( ring_expected_prev[1] !== 1'bx ) && ( ring_prev[1] !== ring_expected_prev[1] )
		&& ((ring_expected_prev[1] !== last_ring_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ring[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ring_expected_prev);
		$display ("     Real value = %b", ring_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ring_exp[1] = ring_expected_prev[1];
	end
	if (
		( turn_out_expected_prev[0] !== 1'bx ) && ( turn_out_prev[0] !== turn_out_expected_prev[0] )
		&& ((turn_out_expected_prev[0] !== last_turn_out_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port turn_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", turn_out_expected_prev);
		$display ("     Real value = %b", turn_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_turn_out_exp[0] = turn_out_expected_prev[0];
	end
	if (
		( turn_out_expected_prev[1] !== 1'bx ) && ( turn_out_prev[1] !== turn_out_expected_prev[1] )
		&& ((turn_out_expected_prev[1] !== last_turn_out_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port turn_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", turn_out_expected_prev);
		$display ("     Real value = %b", turn_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_turn_out_exp[1] = turn_out_expected_prev[1];
	end
	if (
		( y_count_expected_prev[0] !== 1'bx ) && ( y_count_prev[0] !== y_count_expected_prev[0] )
		&& ((y_count_expected_prev[0] !== last_y_count_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y_count[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_count_expected_prev);
		$display ("     Real value = %b", y_count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_y_count_exp[0] = y_count_expected_prev[0];
	end
	if (
		( y_count_expected_prev[1] !== 1'bx ) && ( y_count_prev[1] !== y_count_expected_prev[1] )
		&& ((y_count_expected_prev[1] !== last_y_count_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y_count[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_count_expected_prev);
		$display ("     Real value = %b", y_count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_y_count_exp[1] = y_count_expected_prev[1];
	end
	if (
		( y_count_expected_prev[2] !== 1'bx ) && ( y_count_prev[2] !== y_count_expected_prev[2] )
		&& ((y_count_expected_prev[2] !== last_y_count_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y_count[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_count_expected_prev);
		$display ("     Real value = %b", y_count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_y_count_exp[2] = y_count_expected_prev[2];
	end
	if (
		( y_count_expected_prev[3] !== 1'bx ) && ( y_count_prev[3] !== y_count_expected_prev[3] )
		&& ((y_count_expected_prev[3] !== last_y_count_exp[3]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y_count[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_count_expected_prev);
		$display ("     Real value = %b", y_count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_y_count_exp[3] = y_count_expected_prev[3];
	end
	if (
		( y_count_expected_prev[4] !== 1'bx ) && ( y_count_prev[4] !== y_count_expected_prev[4] )
		&& ((y_count_expected_prev[4] !== last_y_count_exp[4]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y_count[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_count_expected_prev);
		$display ("     Real value = %b", y_count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_y_count_exp[4] = y_count_expected_prev[4];
	end
	if (
		( y_count_expected_prev[5] !== 1'bx ) && ( y_count_prev[5] !== y_count_expected_prev[5] )
		&& ((y_count_expected_prev[5] !== last_y_count_exp[5]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y_count[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_count_expected_prev);
		$display ("     Real value = %b", y_count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_y_count_exp[5] = y_count_expected_prev[5];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module main_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [5:0] r;
reg [1:0] rules;
reg start;
reg stop;
reg [5:0] y;
// wires                                               
wire LEWG;
wire LEWR;
wire LEWY;
wire LSNG;
wire LSNR;
wire LSNY;
wire [2:0] c_state;
wire [31:0] condition;
wire left;
wire [2:0] n_state;
wire [5:0] r_count;
wire [1:0] ring;
wire [1:0] turn_out;
wire [5:0] y_count;

wire sampler;                             

// assign statements (if any)                          
main i1 (
// port map - connection between master ports and signals/registers   
	.LEWG(LEWG),
	.LEWR(LEWR),
	.LEWY(LEWY),
	.LSNG(LSNG),
	.LSNR(LSNR),
	.LSNY(LSNY),
	.c_state(c_state),
	.clk(clk),
	.condition(condition),
	.left(left),
	.n_state(n_state),
	.r(r),
	.r_count(r_count),
	.ring(ring),
	.rules(rules),
	.start(start),
	.stop(stop),
	.turn_out(turn_out),
	.y(y),
	.y_count(y_count)
);

// clk
initial
begin
	repeat(166)
	begin
		clk = 1'b0;
		clk = #3000 1'b1;
		# 3000;
	end
	clk = 1'b0;
	clk = #3000 1'b1;
end 
// r[ 5 ]
initial
begin
	r[5] = 1'b0;
end 
// r[ 4 ]
initial
begin
	r[4] = 1'b1;
end 
// r[ 3 ]
initial
begin
	r[3] = 1'b0;
end 
// r[ 2 ]
initial
begin
	r[2] = 1'b0;
end 
// r[ 1 ]
initial
begin
	r[1] = 1'b0;
end 
// r[ 0 ]
initial
begin
	r[0] = 1'b0;
end 
// rules[ 1 ]
initial
begin
	rules[1] = 1'b1;
end 
// rules[ 0 ]
initial
begin
	rules[0] = 1'b1;
end 

// start
initial
begin
	start = 1'b0;
	start = #50000 1'b1;
end 

// stop
initial
begin
	stop = 1'b0;
end 
// y[ 5 ]
initial
begin
	y[5] = 1'b0;
end 
// y[ 4 ]
initial
begin
	y[4] = 1'b0;
end 
// y[ 3 ]
initial
begin
	y[3] = 1'b0;
end 
// y[ 2 ]
initial
begin
	y[2] = 1'b1;
end 
// y[ 1 ]
initial
begin
	y[1] = 1'b0;
end 
// y[ 0 ]
initial
begin
	y[0] = 1'b0;
end 

main_vlg_sample_tst tb_sample (
	.clk(clk),
	.r(r),
	.rules(rules),
	.start(start),
	.stop(stop),
	.y(y),
	.sampler_tx(sampler)
);

main_vlg_check_tst tb_out(
	.LEWG(LEWG),
	.LEWR(LEWR),
	.LEWY(LEWY),
	.LSNG(LSNG),
	.LSNR(LSNR),
	.LSNY(LSNY),
	.c_state(c_state),
	.condition(condition),
	.left(left),
	.n_state(n_state),
	.r_count(r_count),
	.ring(ring),
	.turn_out(turn_out),
	.y_count(y_count),
	.sampler_rx(sampler)
);
endmodule

